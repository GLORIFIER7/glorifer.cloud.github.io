"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLabelingServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/data_labeling_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./data_labeling_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service for the AI Platform Data Labeling API.
 * @class
 * @memberof v1beta1
 */
class DataLabelingServiceClient {
    /**
     * Construct an instance of DataLabelingServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DataLabelingServiceClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            annotatedDatasetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/datasets/{dataset}/annotatedDatasets/{annotated_dataset}'),
            annotationSpecSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/annotationSpecSets/{annotation_spec_set}'),
            dataItemPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/datasets/{dataset}/dataItems/{data_item}'),
            datasetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/datasets/{dataset}'),
            evaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/datasets/{dataset}/evaluations/{evaluation}'),
            evaluationJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/evaluationJobs/{evaluation_job}'),
            examplePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/datasets/{dataset}/annotatedDatasets/{annotated_dataset}/examples/{example}'),
            instructionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instructions/{instruction}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listDatasets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'datasets'),
            listDataItems: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dataItems'),
            listAnnotatedDatasets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'annotatedDatasets'),
            listExamples: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'examples'),
            listAnnotationSpecSets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'annotationSpecSets'),
            listInstructions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'instructions'),
            searchEvaluations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'evaluations'),
            searchExampleComparisons: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'exampleComparisons'),
            listEvaluationJobs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'evaluationJobs'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback === 'rest') {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    get: '/v1beta1/{name=projects/*/operations/*}:cancel',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1beta1/{name=projects/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1beta1/{name=projects/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1beta1/{name=projects/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const importDataResponse = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.ImportDataOperationResponse');
        const importDataMetadata = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.ImportDataOperationMetadata');
        const exportDataResponse = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.ExportDataOperationResponse');
        const exportDataMetadata = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.ExportDataOperationMetadata');
        const labelImageResponse = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.AnnotatedDataset');
        const labelImageMetadata = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.LabelOperationMetadata');
        const labelVideoResponse = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.AnnotatedDataset');
        const labelVideoMetadata = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.LabelOperationMetadata');
        const labelTextResponse = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.AnnotatedDataset');
        const labelTextMetadata = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.LabelOperationMetadata');
        const createInstructionResponse = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.Instruction');
        const createInstructionMetadata = protoFilesRoot.lookup('.google.cloud.datalabeling.v1beta1.CreateInstructionMetadata');
        this.descriptors.longrunning = {
            importData: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDataResponse.decode.bind(importDataResponse), importDataMetadata.decode.bind(importDataMetadata)),
            exportData: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDataResponse.decode.bind(exportDataResponse), exportDataMetadata.decode.bind(exportDataMetadata)),
            labelImage: new this._gaxModule.LongrunningDescriptor(this.operationsClient, labelImageResponse.decode.bind(labelImageResponse), labelImageMetadata.decode.bind(labelImageMetadata)),
            labelVideo: new this._gaxModule.LongrunningDescriptor(this.operationsClient, labelVideoResponse.decode.bind(labelVideoResponse), labelVideoMetadata.decode.bind(labelVideoMetadata)),
            labelText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, labelTextResponse.decode.bind(labelTextResponse), labelTextMetadata.decode.bind(labelTextMetadata)),
            createInstruction: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createInstructionResponse.decode.bind(createInstructionResponse), createInstructionMetadata.decode.bind(createInstructionMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.datalabeling.v1beta1.DataLabelingService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.dataLabelingServiceStub) {
            return this.dataLabelingServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.datalabeling.v1beta1.DataLabelingService.
        this.dataLabelingServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.datalabeling.v1beta1.DataLabelingService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.datalabeling.v1beta1
                    .DataLabelingService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const dataLabelingServiceStubMethods = [
            'createDataset',
            'getDataset',
            'listDatasets',
            'deleteDataset',
            'importData',
            'exportData',
            'getDataItem',
            'listDataItems',
            'getAnnotatedDataset',
            'listAnnotatedDatasets',
            'deleteAnnotatedDataset',
            'labelImage',
            'labelVideo',
            'labelText',
            'getExample',
            'listExamples',
            'createAnnotationSpecSet',
            'getAnnotationSpecSet',
            'listAnnotationSpecSets',
            'deleteAnnotationSpecSet',
            'createInstruction',
            'getInstruction',
            'listInstructions',
            'deleteInstruction',
            'getEvaluation',
            'searchEvaluations',
            'searchExampleComparisons',
            'createEvaluationJob',
            'updateEvaluationJob',
            'getEvaluationJob',
            'pauseEvaluationJob',
            'resumeEvaluationJob',
            'deleteEvaluationJob',
            'listEvaluationJobs',
        ];
        for (const methodName of dataLabelingServiceStubMethods) {
            const callPromise = this.dataLabelingServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.dataLabelingServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'datalabeling.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'datalabeling.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createDataset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDataset(request, options, callback);
    }
    getDataset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDataset(request, options, callback);
    }
    deleteDataset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDataset(request, options, callback);
    }
    getDataItem(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDataItem(request, options, callback);
    }
    getAnnotatedDataset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAnnotatedDataset(request, options, callback);
    }
    deleteAnnotatedDataset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAnnotatedDataset(request, options, callback);
    }
    getExample(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getExample(request, options, callback);
    }
    createAnnotationSpecSet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createAnnotationSpecSet(request, options, callback);
    }
    getAnnotationSpecSet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAnnotationSpecSet(request, options, callback);
    }
    deleteAnnotationSpecSet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAnnotationSpecSet(request, options, callback);
    }
    getInstruction(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getInstruction(request, options, callback);
    }
    deleteInstruction(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteInstruction(request, options, callback);
    }
    getEvaluation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEvaluation(request, options, callback);
    }
    createEvaluationJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createEvaluationJob(request, options, callback);
    }
    updateEvaluationJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'evaluation_job.name': (_a = request.evaluationJob.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateEvaluationJob(request, options, callback);
    }
    getEvaluationJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEvaluationJob(request, options, callback);
    }
    pauseEvaluationJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.pauseEvaluationJob(request, options, callback);
    }
    resumeEvaluationJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.resumeEvaluationJob(request, options, callback);
    }
    deleteEvaluationJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteEvaluationJob(request, options, callback);
    }
    importData(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.importData(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importData()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.import_data.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ImportData_async
     */
    async checkImportDataProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importData, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    exportData(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.exportData(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `exportData()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.export_data.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ExportData_async
     */
    async checkExportDataProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportData, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    labelImage(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.labelImage(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `labelImage()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.label_image.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_LabelImage_async
     */
    async checkLabelImageProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.labelImage, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    labelVideo(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.labelVideo(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `labelVideo()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.label_video.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_LabelVideo_async
     */
    async checkLabelVideoProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.labelVideo, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    labelText(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.labelText(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `labelText()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.label_text.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_LabelText_async
     */
    async checkLabelTextProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.labelText, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createInstruction(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createInstruction(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createInstruction()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.create_instruction.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_CreateInstruction_async
     */
    async checkCreateInstructionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createInstruction, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listDatasets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDatasets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Dataset resource parent, format:
     *   projects/{project_id}
     * @param {string} [request.filter]
     *   Optional. Filter on dataset is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListDatasetsResponse.next_page_token|ListDatasetsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListDatasets] call.
     *   Returns the first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Dataset]{@link google.cloud.datalabeling.v1beta1.Dataset} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDatasetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listDatasetsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatasets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatasets.createStream(this.innerApiCalls.listDatasets, request, callSettings);
    }
    /**
     * Equivalent to `listDatasets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Dataset resource parent, format:
     *   projects/{project_id}
     * @param {string} [request.filter]
     *   Optional. Filter on dataset is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListDatasetsResponse.next_page_token|ListDatasetsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListDatasets] call.
     *   Returns the first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Dataset]{@link google.cloud.datalabeling.v1beta1.Dataset}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.list_datasets.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ListDatasets_async
     */
    listDatasetsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatasets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatasets.asyncIterate(this.innerApiCalls['listDatasets'], request, callSettings);
    }
    listDataItems(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDataItems(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Name of the dataset to list data items, format:
     *   projects/{project_id}/datasets/{dataset_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListDataItemsResponse.next_page_token|ListDataItemsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListDataItems] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [DataItem]{@link google.cloud.datalabeling.v1beta1.DataItem} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataItemsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listDataItemsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDataItems'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDataItems.createStream(this.innerApiCalls.listDataItems, request, callSettings);
    }
    /**
     * Equivalent to `listDataItems`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Name of the dataset to list data items, format:
     *   projects/{project_id}/datasets/{dataset_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListDataItemsResponse.next_page_token|ListDataItemsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListDataItems] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [DataItem]{@link google.cloud.datalabeling.v1beta1.DataItem}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.list_data_items.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ListDataItems_async
     */
    listDataItemsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDataItems'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDataItems.asyncIterate(this.innerApiCalls['listDataItems'], request, callSettings);
    }
    listAnnotatedDatasets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAnnotatedDatasets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Name of the dataset to list annotated datasets, format:
     *   projects/{project_id}/datasets/{dataset_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListAnnotatedDatasetsResponse.next_page_token|ListAnnotatedDatasetsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListAnnotatedDatasets] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [AnnotatedDataset]{@link google.cloud.datalabeling.v1beta1.AnnotatedDataset} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAnnotatedDatasetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listAnnotatedDatasetsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAnnotatedDatasets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAnnotatedDatasets.createStream(this.innerApiCalls.listAnnotatedDatasets, request, callSettings);
    }
    /**
     * Equivalent to `listAnnotatedDatasets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Name of the dataset to list annotated datasets, format:
     *   projects/{project_id}/datasets/{dataset_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListAnnotatedDatasetsResponse.next_page_token|ListAnnotatedDatasetsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListAnnotatedDatasets] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [AnnotatedDataset]{@link google.cloud.datalabeling.v1beta1.AnnotatedDataset}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.list_annotated_datasets.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ListAnnotatedDatasets_async
     */
    listAnnotatedDatasetsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAnnotatedDatasets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAnnotatedDatasets.asyncIterate(this.innerApiCalls['listAnnotatedDatasets'], request, callSettings);
    }
    listExamples(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listExamples(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example resource parent.
     * @param {string} [request.filter]
     *   Optional. An expression for filtering Examples. For annotated datasets that
     *   have annotation spec set, filter by
     *   annotation_spec.display_name is supported. Format
     *   "annotation_spec.display_name = {display_name}"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListExamplesResponse.next_page_token|ListExamplesResponse.next_page_token} of the previous
     *   [DataLabelingService.ListExamples] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Example]{@link google.cloud.datalabeling.v1beta1.Example} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listExamplesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listExamplesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listExamples'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listExamples.createStream(this.innerApiCalls.listExamples, request, callSettings);
    }
    /**
     * Equivalent to `listExamples`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Example resource parent.
     * @param {string} [request.filter]
     *   Optional. An expression for filtering Examples. For annotated datasets that
     *   have annotation spec set, filter by
     *   annotation_spec.display_name is supported. Format
     *   "annotation_spec.display_name = {display_name}"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListExamplesResponse.next_page_token|ListExamplesResponse.next_page_token} of the previous
     *   [DataLabelingService.ListExamples] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Example]{@link google.cloud.datalabeling.v1beta1.Example}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.list_examples.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ListExamples_async
     */
    listExamplesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listExamples'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listExamples.asyncIterate(this.innerApiCalls['listExamples'], request, callSettings);
    }
    listAnnotationSpecSets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAnnotationSpecSets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent of AnnotationSpecSet resource, format:
     *   projects/{project_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListAnnotationSpecSetsResponse.next_page_token|ListAnnotationSpecSetsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListAnnotationSpecSets] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [AnnotationSpecSet]{@link google.cloud.datalabeling.v1beta1.AnnotationSpecSet} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAnnotationSpecSetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listAnnotationSpecSetsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAnnotationSpecSets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAnnotationSpecSets.createStream(this.innerApiCalls.listAnnotationSpecSets, request, callSettings);
    }
    /**
     * Equivalent to `listAnnotationSpecSets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent of AnnotationSpecSet resource, format:
     *   projects/{project_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListAnnotationSpecSetsResponse.next_page_token|ListAnnotationSpecSetsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListAnnotationSpecSets] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [AnnotationSpecSet]{@link google.cloud.datalabeling.v1beta1.AnnotationSpecSet}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.list_annotation_spec_sets.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ListAnnotationSpecSets_async
     */
    listAnnotationSpecSetsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAnnotationSpecSets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAnnotationSpecSets.asyncIterate(this.innerApiCalls['listAnnotationSpecSets'], request, callSettings);
    }
    listInstructions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listInstructions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Instruction resource parent, format:
     *   projects/{project_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListInstructionsResponse.next_page_token|ListInstructionsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListInstructions] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Instruction]{@link google.cloud.datalabeling.v1beta1.Instruction} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listInstructionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listInstructionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listInstructions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listInstructions.createStream(this.innerApiCalls.listInstructions, request, callSettings);
    }
    /**
     * Equivalent to `listInstructions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Instruction resource parent, format:
     *   projects/{project_id}
     * @param {string} [request.filter]
     *   Optional. Filter is not supported at this moment.
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by
     *   {@link google.cloud.datalabeling.v1beta1.ListInstructionsResponse.next_page_token|ListInstructionsResponse.next_page_token} of the previous
     *   [DataLabelingService.ListInstructions] call.
     *   Return first page if empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Instruction]{@link google.cloud.datalabeling.v1beta1.Instruction}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.list_instructions.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ListInstructions_async
     */
    listInstructionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listInstructions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listInstructions.asyncIterate(this.innerApiCalls['listInstructions'], request, callSettings);
    }
    searchEvaluations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.searchEvaluations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Evaluation search parent (project ID). Format:
     *   "projects/<var>{project_id}</var>"
     * @param {string} [request.filter]
     *   Optional. To search evaluations, you can filter by the following:
     *
     *   * evaluation<span>_</span>job.evaluation_job_id (the last part of
     *     {@link google.cloud.datalabeling.v1beta1.EvaluationJob.name|EvaluationJob.name})
     *   * evaluation<span>_</span>job.model_id (the <var>{model_name}</var> portion
     *     of {@link google.cloud.datalabeling.v1beta1.EvaluationJob.model_version|EvaluationJob.modelVersion})
     *   * evaluation<span>_</span>job.evaluation_job_run_time_start (Minimum
     *     threshold for the
     *     {@link google.cloud.datalabeling.v1beta1.Evaluation.evaluation_job_run_time|evaluationJobRunTime} that created
     *     the evaluation)
     *   * evaluation<span>_</span>job.evaluation_job_run_time_end (Maximum
     *     threshold for the
     *     {@link google.cloud.datalabeling.v1beta1.Evaluation.evaluation_job_run_time|evaluationJobRunTime} that created
     *     the evaluation)
     *   * evaluation<span>_</span>job.job_state ({@link google.cloud.datalabeling.v1beta1.EvaluationJob.state|EvaluationJob.state})
     *   * annotation<span>_</span>spec.display_name (the Evaluation contains a
     *     metric for the annotation spec with this
     *     {@link google.cloud.datalabeling.v1beta1.AnnotationSpec.display_name|displayName})
     *
     *   To filter by multiple critiera, use the `AND` operator or the `OR`
     *   operator. The following examples shows a string that filters by several
     *   critiera:
     *
     *   "evaluation<span>_</span>job.evaluation_job_id =
     *   <var>{evaluation_job_id}</var> AND evaluation<span>_</span>job.model_id =
     *   <var>{model_name}</var> AND
     *   evaluation<span>_</span>job.evaluation_job_run_time_start =
     *   <var>{timestamp_1}</var> AND
     *   evaluation<span>_</span>job.evaluation_job_run_time_end =
     *   <var>{timestamp_2}</var> AND annotation<span>_</span>spec.display_name =
     *   <var>{display_name}</var>"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by the
     *   {@link google.cloud.datalabeling.v1beta1.SearchEvaluationsResponse.next_page_token|nextPageToken} of the response
     *   to a previous search request.
     *
     *   If you don't specify this field, the API call requests the first page of
     *   the search.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Evaluation]{@link google.cloud.datalabeling.v1beta1.Evaluation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `searchEvaluationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    searchEvaluationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchEvaluations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchEvaluations.createStream(this.innerApiCalls.searchEvaluations, request, callSettings);
    }
    /**
     * Equivalent to `searchEvaluations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Evaluation search parent (project ID). Format:
     *   "projects/<var>{project_id}</var>"
     * @param {string} [request.filter]
     *   Optional. To search evaluations, you can filter by the following:
     *
     *   * evaluation<span>_</span>job.evaluation_job_id (the last part of
     *     {@link google.cloud.datalabeling.v1beta1.EvaluationJob.name|EvaluationJob.name})
     *   * evaluation<span>_</span>job.model_id (the <var>{model_name}</var> portion
     *     of {@link google.cloud.datalabeling.v1beta1.EvaluationJob.model_version|EvaluationJob.modelVersion})
     *   * evaluation<span>_</span>job.evaluation_job_run_time_start (Minimum
     *     threshold for the
     *     {@link google.cloud.datalabeling.v1beta1.Evaluation.evaluation_job_run_time|evaluationJobRunTime} that created
     *     the evaluation)
     *   * evaluation<span>_</span>job.evaluation_job_run_time_end (Maximum
     *     threshold for the
     *     {@link google.cloud.datalabeling.v1beta1.Evaluation.evaluation_job_run_time|evaluationJobRunTime} that created
     *     the evaluation)
     *   * evaluation<span>_</span>job.job_state ({@link google.cloud.datalabeling.v1beta1.EvaluationJob.state|EvaluationJob.state})
     *   * annotation<span>_</span>spec.display_name (the Evaluation contains a
     *     metric for the annotation spec with this
     *     {@link google.cloud.datalabeling.v1beta1.AnnotationSpec.display_name|displayName})
     *
     *   To filter by multiple critiera, use the `AND` operator or the `OR`
     *   operator. The following examples shows a string that filters by several
     *   critiera:
     *
     *   "evaluation<span>_</span>job.evaluation_job_id =
     *   <var>{evaluation_job_id}</var> AND evaluation<span>_</span>job.model_id =
     *   <var>{model_name}</var> AND
     *   evaluation<span>_</span>job.evaluation_job_run_time_start =
     *   <var>{timestamp_1}</var> AND
     *   evaluation<span>_</span>job.evaluation_job_run_time_end =
     *   <var>{timestamp_2}</var> AND annotation<span>_</span>spec.display_name =
     *   <var>{display_name}</var>"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by the
     *   {@link google.cloud.datalabeling.v1beta1.SearchEvaluationsResponse.next_page_token|nextPageToken} of the response
     *   to a previous search request.
     *
     *   If you don't specify this field, the API call requests the first page of
     *   the search.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Evaluation]{@link google.cloud.datalabeling.v1beta1.Evaluation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.search_evaluations.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_SearchEvaluations_async
     */
    searchEvaluationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchEvaluations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchEvaluations.asyncIterate(this.innerApiCalls['searchEvaluations'], request, callSettings);
    }
    searchExampleComparisons(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.searchExampleComparisons(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Name of the {@link google.cloud.datalabeling.v1beta1.Evaluation|Evaluation} resource to search for example
     *   comparisons from. Format:
     *
     *   "projects/<var>{project_id}</var>/datasets/<var>{dataset_id}</var>/evaluations/<var>{evaluation_id}</var>"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by the
     *   {@link SearchExampleComparisons.next_page_token|nextPageToken} of the response
     *   to a previous search rquest.
     *
     *   If you don't specify this field, the API call requests the first page of
     *   the search.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [ExampleComparison]{@link google.cloud.datalabeling.v1beta1.SearchExampleComparisonsResponse.ExampleComparison} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `searchExampleComparisonsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    searchExampleComparisonsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchExampleComparisons'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchExampleComparisons.createStream(this.innerApiCalls.searchExampleComparisons, request, callSettings);
    }
    /**
     * Equivalent to `searchExampleComparisons`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Name of the {@link google.cloud.datalabeling.v1beta1.Evaluation|Evaluation} resource to search for example
     *   comparisons from. Format:
     *
     *   "projects/<var>{project_id}</var>/datasets/<var>{dataset_id}</var>/evaluations/<var>{evaluation_id}</var>"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by the
     *   {@link SearchExampleComparisons.next_page_token|nextPageToken} of the response
     *   to a previous search rquest.
     *
     *   If you don't specify this field, the API call requests the first page of
     *   the search.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [ExampleComparison]{@link google.cloud.datalabeling.v1beta1.SearchExampleComparisonsResponse.ExampleComparison}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.search_example_comparisons.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_SearchExampleComparisons_async
     */
    searchExampleComparisonsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchExampleComparisons'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchExampleComparisons.asyncIterate(this.innerApiCalls['searchExampleComparisons'], request, callSettings);
    }
    listEvaluationJobs(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listEvaluationJobs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Evaluation job resource parent. Format:
     *   "projects/<var>{project_id}</var>"
     * @param {string} [request.filter]
     *   Optional. You can filter the jobs to list by model_id (also known as
     *   model_name, as described in
     *   {@link google.cloud.datalabeling.v1beta1.EvaluationJob.model_version|EvaluationJob.modelVersion}) or by
     *   evaluation job state (as described in {@link google.cloud.datalabeling.v1beta1.EvaluationJob.state|EvaluationJob.state}). To filter
     *   by both criteria, use the `AND` operator or the `OR` operator. For example,
     *   you can use the following string for your filter:
     *   "evaluation<span>_</span>job.model_id = <var>{model_name}</var> AND
     *   evaluation<span>_</span>job.state = <var>{evaluation_job_state}</var>"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by the
     *   {@link google.cloud.datalabeling.v1beta1.ListEvaluationJobsResponse.next_page_token|nextPageToken} in the response
     *   to the previous request. The request returns the first page if this is
     *   empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [EvaluationJob]{@link google.cloud.datalabeling.v1beta1.EvaluationJob} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEvaluationJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listEvaluationJobsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEvaluationJobs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEvaluationJobs.createStream(this.innerApiCalls.listEvaluationJobs, request, callSettings);
    }
    /**
     * Equivalent to `listEvaluationJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Evaluation job resource parent. Format:
     *   "projects/<var>{project_id}</var>"
     * @param {string} [request.filter]
     *   Optional. You can filter the jobs to list by model_id (also known as
     *   model_name, as described in
     *   {@link google.cloud.datalabeling.v1beta1.EvaluationJob.model_version|EvaluationJob.modelVersion}) or by
     *   evaluation job state (as described in {@link google.cloud.datalabeling.v1beta1.EvaluationJob.state|EvaluationJob.state}). To filter
     *   by both criteria, use the `AND` operator or the `OR` operator. For example,
     *   you can use the following string for your filter:
     *   "evaluation<span>_</span>job.model_id = <var>{model_name}</var> AND
     *   evaluation<span>_</span>job.state = <var>{evaluation_job_state}</var>"
     * @param {number} [request.pageSize]
     *   Optional. Requested page size. Server may return fewer results than
     *   requested. Default value is 100.
     * @param {string} [request.pageToken]
     *   Optional. A token identifying a page of results for the server to return.
     *   Typically obtained by the
     *   {@link google.cloud.datalabeling.v1beta1.ListEvaluationJobsResponse.next_page_token|nextPageToken} in the response
     *   to the previous request. The request returns the first page if this is
     *   empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [EvaluationJob]{@link google.cloud.datalabeling.v1beta1.EvaluationJob}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/data_labeling_service.list_evaluation_jobs.js</caption>
     * region_tag:datalabeling_v1beta1_generated_DataLabelingService_ListEvaluationJobs_async
     */
    listEvaluationJobsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEvaluationJobs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEvaluationJobs.asyncIterate(this.innerApiCalls['listEvaluationJobs'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified annotatedDataset resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @param {string} annotated_dataset
     * @returns {string} Resource name string.
     */
    annotatedDatasetPath(project, dataset, annotatedDataset) {
        return this.pathTemplates.annotatedDatasetPathTemplate.render({
            project: project,
            dataset: dataset,
            annotated_dataset: annotatedDataset,
        });
    }
    /**
     * Parse the project from AnnotatedDataset resource.
     *
     * @param {string} annotatedDatasetName
     *   A fully-qualified path representing AnnotatedDataset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotatedDatasetName(annotatedDatasetName) {
        return this.pathTemplates.annotatedDatasetPathTemplate.match(annotatedDatasetName).project;
    }
    /**
     * Parse the dataset from AnnotatedDataset resource.
     *
     * @param {string} annotatedDatasetName
     *   A fully-qualified path representing AnnotatedDataset resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotatedDatasetName(annotatedDatasetName) {
        return this.pathTemplates.annotatedDatasetPathTemplate.match(annotatedDatasetName).dataset;
    }
    /**
     * Parse the annotated_dataset from AnnotatedDataset resource.
     *
     * @param {string} annotatedDatasetName
     *   A fully-qualified path representing AnnotatedDataset resource.
     * @returns {string} A string representing the annotated_dataset.
     */
    matchAnnotatedDatasetFromAnnotatedDatasetName(annotatedDatasetName) {
        return this.pathTemplates.annotatedDatasetPathTemplate.match(annotatedDatasetName).annotated_dataset;
    }
    /**
     * Return a fully-qualified annotationSpecSet resource name string.
     *
     * @param {string} project
     * @param {string} annotation_spec_set
     * @returns {string} Resource name string.
     */
    annotationSpecSetPath(project, annotationSpecSet) {
        return this.pathTemplates.annotationSpecSetPathTemplate.render({
            project: project,
            annotation_spec_set: annotationSpecSet,
        });
    }
    /**
     * Parse the project from AnnotationSpecSet resource.
     *
     * @param {string} annotationSpecSetName
     *   A fully-qualified path representing AnnotationSpecSet resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationSpecSetName(annotationSpecSetName) {
        return this.pathTemplates.annotationSpecSetPathTemplate.match(annotationSpecSetName).project;
    }
    /**
     * Parse the annotation_spec_set from AnnotationSpecSet resource.
     *
     * @param {string} annotationSpecSetName
     *   A fully-qualified path representing AnnotationSpecSet resource.
     * @returns {string} A string representing the annotation_spec_set.
     */
    matchAnnotationSpecSetFromAnnotationSpecSetName(annotationSpecSetName) {
        return this.pathTemplates.annotationSpecSetPathTemplate.match(annotationSpecSetName).annotation_spec_set;
    }
    /**
     * Return a fully-qualified dataItem resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @param {string} data_item
     * @returns {string} Resource name string.
     */
    dataItemPath(project, dataset, dataItem) {
        return this.pathTemplates.dataItemPathTemplate.render({
            project: project,
            dataset: dataset,
            data_item: dataItem,
        });
    }
    /**
     * Parse the project from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).project;
    }
    /**
     * Parse the dataset from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).dataset;
    }
    /**
     * Parse the data_item from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the data_item.
     */
    matchDataItemFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName)
            .data_item;
    }
    /**
     * Return a fully-qualified dataset resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @returns {string} Resource name string.
     */
    datasetPath(project, dataset) {
        return this.pathTemplates.datasetPathTemplate.render({
            project: project,
            dataset: dataset,
        });
    }
    /**
     * Parse the project from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
    }
    /**
     * Parse the dataset from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
    }
    /**
     * Return a fully-qualified evaluation resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @param {string} evaluation
     * @returns {string} Resource name string.
     */
    evaluationPath(project, dataset, evaluation) {
        return this.pathTemplates.evaluationPathTemplate.render({
            project: project,
            dataset: dataset,
            evaluation: evaluation,
        });
    }
    /**
     * Parse the project from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .project;
    }
    /**
     * Parse the dataset from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .dataset;
    }
    /**
     * Parse the evaluation from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .evaluation;
    }
    /**
     * Return a fully-qualified evaluationJob resource name string.
     *
     * @param {string} project
     * @param {string} evaluation_job
     * @returns {string} Resource name string.
     */
    evaluationJobPath(project, evaluationJob) {
        return this.pathTemplates.evaluationJobPathTemplate.render({
            project: project,
            evaluation_job: evaluationJob,
        });
    }
    /**
     * Parse the project from EvaluationJob resource.
     *
     * @param {string} evaluationJobName
     *   A fully-qualified path representing EvaluationJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEvaluationJobName(evaluationJobName) {
        return this.pathTemplates.evaluationJobPathTemplate.match(evaluationJobName)
            .project;
    }
    /**
     * Parse the evaluation_job from EvaluationJob resource.
     *
     * @param {string} evaluationJobName
     *   A fully-qualified path representing EvaluationJob resource.
     * @returns {string} A string representing the evaluation_job.
     */
    matchEvaluationJobFromEvaluationJobName(evaluationJobName) {
        return this.pathTemplates.evaluationJobPathTemplate.match(evaluationJobName)
            .evaluation_job;
    }
    /**
     * Return a fully-qualified example resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @param {string} annotated_dataset
     * @param {string} example
     * @returns {string} Resource name string.
     */
    examplePath(project, dataset, annotatedDataset, example) {
        return this.pathTemplates.examplePathTemplate.render({
            project: project,
            dataset: dataset,
            annotated_dataset: annotatedDataset,
            example: example,
        });
    }
    /**
     * Parse the project from Example resource.
     *
     * @param {string} exampleName
     *   A fully-qualified path representing Example resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExampleName(exampleName) {
        return this.pathTemplates.examplePathTemplate.match(exampleName).project;
    }
    /**
     * Parse the dataset from Example resource.
     *
     * @param {string} exampleName
     *   A fully-qualified path representing Example resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromExampleName(exampleName) {
        return this.pathTemplates.examplePathTemplate.match(exampleName).dataset;
    }
    /**
     * Parse the annotated_dataset from Example resource.
     *
     * @param {string} exampleName
     *   A fully-qualified path representing Example resource.
     * @returns {string} A string representing the annotated_dataset.
     */
    matchAnnotatedDatasetFromExampleName(exampleName) {
        return this.pathTemplates.examplePathTemplate.match(exampleName)
            .annotated_dataset;
    }
    /**
     * Parse the example from Example resource.
     *
     * @param {string} exampleName
     *   A fully-qualified path representing Example resource.
     * @returns {string} A string representing the example.
     */
    matchExampleFromExampleName(exampleName) {
        return this.pathTemplates.examplePathTemplate.match(exampleName).example;
    }
    /**
     * Return a fully-qualified instruction resource name string.
     *
     * @param {string} project
     * @param {string} instruction
     * @returns {string} Resource name string.
     */
    instructionPath(project, instruction) {
        return this.pathTemplates.instructionPathTemplate.render({
            project: project,
            instruction: instruction,
        });
    }
    /**
     * Parse the project from Instruction resource.
     *
     * @param {string} instructionName
     *   A fully-qualified path representing Instruction resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstructionName(instructionName) {
        return this.pathTemplates.instructionPathTemplate.match(instructionName)
            .project;
    }
    /**
     * Parse the instruction from Instruction resource.
     *
     * @param {string} instructionName
     *   A fully-qualified path representing Instruction resource.
     * @returns {string} A string representing the instruction.
     */
    matchInstructionFromInstructionName(instructionName) {
        return this.pathTemplates.instructionPathTemplate.match(instructionName)
            .instruction;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.dataLabelingServiceStub && !this._terminated) {
            return this.dataLabelingServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.DataLabelingServiceClient = DataLabelingServiceClient;
//# sourceMappingURL=data_labeling_service_client.js.map